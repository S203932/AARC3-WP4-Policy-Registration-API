name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DB_HOST: mysql.test-net
      DB_USER: testuser
      DB_PASSWORD: testpass
      DB_PORT: 3306
      DB_NAME: testdb
      API_HOST: api-test.test-net
      IMAGE_NAME: ghcr.io/${{ github.repository }}
      IMAGE_TAG: base-implementation

    steps:
      

      # Necessary as I need to convert the image name to lower case, cause linux reasons
      - name: Set lowercase image name
        id: prep
        run: |
          IMAGE_NAME_LOWER=$(echo "${IMAGE_NAME}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME_LOWER=$IMAGE_NAME_LOWER" >> $GITHUB_ENV


      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME_LOWER/myapp:$IMAGE_TAG .

      - name: Create Docker network
        run: docker network create test-net


      #Starting my db for testing on the shared network
      - name: Run MySQL container
        run: |
          docker run -d --name mysql --hostname mysql --network test-net -p 3306:3306\
            -e MYSQL_ROOT_PASSWORD=$DB_PASSWORD \
            -e MYSQL_DATABASE=$DB_NAME \
            -e MYSQL_USER=$DB_USER \
            -e MYSQL_PASSWORD=$DB_PASSWORD \
            mysql:8.0



      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if docker exec mysql mysqladmin ping -h localhost --silent; then
              echo "MySQL is ready"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Start MySQL server inside container
        run: |
          docker exec mysql mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid 

      # Running the app for testing
      - name: Run app container connected to network
        run: |
          docker run -d --name api-test --network test-net \
            -e DB_HOST=$DB_HOST \
            -e DB_USER=$DB_USER \
            -e DB_PASSWORD=$DB_PASSWORD \
            -e DB_PORT=$DB_PORT \
            -e DB_NAME=$DB_NAME \
            $IMAGE_NAME_LOWER/myapp:$IMAGE_TAG \

      - name: Log to see if both containers are on the network
        run: |
          docker network inspect test-net

      - name: Wait for API to be ready
        run: |
          for i in {1..5}; do
            if docker run --rm --network test-net curlimages/curl:latest \
                curl -s --fail $API_HOST:8080/; then
              echo "API is ready"
              break
            fi
            echo "Waiting for API to be ready..."
            sleep 3
          done


      - name: Run tests inside container
        run: |
          docker build -t test-runner -f- . <<EOF
          FROM python:3.11-slim
          WORKDIR /app
          COPY . .
          RUN pip install --upgrade pip && \
              pip install -r requirements.txt && \
              pip install pytest mysql-connector-python
          CMD ["pytest", "tests"]
          EOF

          docker run --rm --name test-runner --network test-net \
            -e APP_URL=$API_HOST:8080/ \
            test-runner

      - name: Stop app container
        if: always()
        run: docker stop api-test || true

      - name: Debug API container logs
        if: always()
        run: docker logs api-test || true

      - name: Debug mysql container logs
        if: always()
        run: docker logs mysql || true

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME_LOWER/myapp:$IMAGE_TAG
