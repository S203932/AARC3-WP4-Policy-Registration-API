name: Build and Push Docker Image

on:
  push:
    branches:
      - main # or your deployment branch
  workflow_dispatch: # allows manual runs

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      IMAGE_NAME: ghcr.io/${{ github.repository }}
      IMAGE_TAG: base-implementation

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Create network
        run: docker network create test-net

      - name: Run MySQL container
        run: |
          docker run -d --rm --name mysql --network test-net \
            -e MYSQL_ROOT_PASSWORD=rootpass \
            -e MYSQL_DATABASE=testdb \
            -e MYSQL_USER=testuser \
            -e MYSQL_PASSWORD=testpass \
            mysql:8.0

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set lowercase image name
        id: prep
        run: |
          IMAGE_NAME_LOWER=$(echo "${IMAGE_NAME}" | tr '[:upper:]' '[:lower:]')
          echo "IMAGE_NAME_LOWER=$IMAGE_NAME_LOWER" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME_LOWER/myapp:$IMAGE_TAG .

      # Optional: Run container with secrets for testing
      - name: Run app container connected to network
        run: |
          timeout 10s docker run --rm --init --network test-net \
            -e DB_HOST=mysql \
            -e DB_USER=testuser \
            -e DB_PASSWORD=testpass \
            -e DB_PORT=3306 \
            -e DB_NAME=testdb \
            $IMAGE_NAME_LOWER/myapp:$IMAGE_TAG || true

      - name: Push Docker image
        run: |
          docker push $IMAGE_NAME_LOWER/myapp:$IMAGE_TAG
